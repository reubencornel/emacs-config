;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;; Disabling the annoying bell
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
(setq ring-bell-function 'ignore)

(defun make-backup-file-name(file) 
  (concat "~/emacs/emacsAutosave/" (file-name-nondirectory file) "~")) 

;;;;;;;;;;
;; Diable tool bar mode
;;;;;;;;;;
(tool-bar-mode -1)

(add-to-list 'exec-path "/usr/local/bin")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Git Emacs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(add-to-list 'load-path "~/emacs/git-emacs")
;(require 'git-emacs)
(add-to-list 'load-path "~/emacs/egg")
(require 'egg)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Auctex 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path "~/emacs/auctex")
(load "auctex.el")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Haskell
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path "~/emacs/haskell-mode")
(require 'haskell-mode)
(require 'inf-haskell)
(setf haskell-program-name "/Library/Frameworks/GHC.framework/Versions/Current/usr/bin/ghci")
(setq auto-mode-alist (cons '("\\.hs$" . haskell-mode) auto-mode-alist))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Emacs Customizations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq user-full-name "Reuben Francis Cornel")
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(display-time)

(setq scroll-step 1)
;; Turn on transient mark mode
(transient-mark-mode t)

;; Make all "yes or no" prompts show "y or n" instead
(fset 'yes-or-no-p 'y-or-n-p)

;;C indentation Offset
(setq basic-c-offset 8)

;;Toggle off scroll bar
(toggle-scroll-bar -1)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Tramp configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq tramp-default-method "ssh")
(setq tramp-default-user "rfcornel")
(require 'tramp)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;YASnippet Init
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path (expand-file-name "~/emacs/yasnippet"))
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/emacs/yasnippet/snippets")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Slime Customizations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path "~/emacs/slime")

(require 'slime)
(slime-setup)
(slime-setup '(slime-fancy slime-asdf))
(setq scheme-program-name "/opt/mit-scheme/bin/scheme")
(setq inferior-lisp-program "/usr/local/bin/sbcl")


;;  (add-to-list 'load-path "~/emacs/clojure-mode")
;;  (setq swank-clojure-binary "/Users/reuben/bin/clojure")
;;  (setq swank-clojure-jar-path "/Users/reuben/javaBin/clojure/clojure/clojure.jar")

;;  (require 'clojure-mode)

;;  (add-to-list 'load-path "/Users/reuben/emacs/swank-clojure")
;;  (require 'swank-clojure-autoload)
;;  (swank-clojure-config
;;   (setq swank-clojure-jar-path "/Users/reuben/javaBin/clojure/clojure/clojure.jar")
;;   (setq swank-clojure-extra-classpaths 
;;         (list "/Users/reuben/javaBin/clojure/clojure-contrib/clojure-contrib.jar")))


;; ;; (require 'swank-clojure)
;;  (add-to-list 'slime-lisp-implementations '(sbcl ("/usr/bin/local/sbcl")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Org Mode Customizations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(setq org-hide-leading-stars 't)
(setq org-log-done 'time)
(require 'appt)
(setq org-agenda-include-diary t)
(setq appt-time-msg-list nil)
;;(org-agenda-to-appt)

(defadvice  org-agenda-redo (after org-agenda-redo-add-appts)
  "Pressing `r' on the agenda will also add appointments."
  (progn 
    (setq appt-time-msg-list nil)
    (org-agenda-to-appt)))

(ad-activate 'org-agenda-redo)

(progn
  (appt-activate 1)
  (setq appt-display-format 'window)
  (setq appt-disp-window-function (function my-appt-disp-window))
  (defun my-appt-disp-window (min-to-app new-time msg)
    (call-process (expand-file-name "~/bin/popup.py") nil 0 nil min-to-app msg new-time)))

(setq org-todo-keywords '("TODO" "STARTED" "WAITING" "DONE"))  ;; (6)

;; (require 'remember)
(setq org-directory "/Users/reuben/")
(setq org-default-notes-file (concat org-directory "notes.org"))
(setq org-remember-templates
      '((?t "* TODO %?" "/Users/reuben/organizer.org")
	(?n "* Note %t\n %?" "/Users/reuben/notes.org")))
;; (setq remember-annotation-functions '(org-remember-annotation))
;; (setq remember-handler-functions '(org-remember-handler))
;; (eval-after-load 'remember
;;   '(add-hook 'remember-mode-hook 'org-remember-apply-template))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; auto-install customizations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 (add-to-list 'load-path (expand-file-name "~/emacs/"))
;; (require 'auto-install)
 ;; (setq auto-install-directory "~/emacs/auto-install/")
 ;; (setq auto-install-save-confirm nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; icicles modes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path (expand-file-name "~/emacs/auto-install"))
;(load "icicles.el")
;(icy-mode)
;;(require 'anything-config)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Twit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'twit)

;(require 'ido)
(ido-mode 1)

(require 'linkd)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; color theme
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path (expand-file-name "~/emacs/color-themes"))
(require 'color-theme)
(color-theme-initialize)

(add-to-list 'load-path (expand-file-name "~/emacs"))
(load "uptime.el")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Itunes Controls
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'osx-itunes)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Synonyms
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'synonyms)
(setq synonyms-file "~/emacs/synonyms/mthesaur.txt")
(setq synonyms-cache-file "~/emacs/synonyms/thesaurus.cache.txt")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Tuareg mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path (expand-file-name "~/emacs/tuareg-mode"))
(require 'tuareg)
(setq auto-mode-alist (cons '("\\.ml\\w?" . tuareg-mode) auto-mode-alist))
(autoload 'tuareg-mode "tuareg" "Major mode for editing Caml code" t)
(autoload 'camldebug "camldebug" "Run the Caml debugger" t)


;;;;;;;;;;;;;;;;;;;;
;; Utility Functions
;;;;;;;;;;;;;;;;;;;;

;;* predicate utility
(defun gnu-emacs-p()
;;* end
  (string-match "GNU Emacs" (version)))

(when (gnu-emacs-p)
  (setq mac-command-modifier 'meta))


(defun match-paren (arg)
  "Go to the matching parenthesis if on parenthesis otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
        (t (self-insert-command (or arg 1)))))


(defun fullscreen (&optional f)
  (interactive)
  (set-frame-parameter f 'fullscreen
		       (if (frame-parameter f 'fullscreen) nil 'fullboth)))


(defun make-emacs-translucent()
  (interactive)
  (set-frame-parameter (selected-frame) 'alpha 80))

(defun make-emacs-almost-tranparent()
  (interactive)
  (set-frame-parameter (selected-frame) 'alpha 60))


(defun make-emacs-opaque()
  (interactive)
  (set-frame-parameter (selected-frame) 'alpha 100))

(defun make-emacs-transparent()
  (interactive)
  (set-frame-parameter (selected-frame) 'alpha 40))


(defun get-number-str(day)
  (interactive)
  (let ((last-digit (substring day
			       (- (length day) 1)
			       (length day))))
    (cond ((equal last-digit "1") "st")
	  ((equal last-digit "2") "nd")
	  ((equal last-digit "3") "rd")
	  (t "th"))))

(defun indent-line()
  (interactive)
  (when indent-region-function
    (save-excursion
      (funcall indent-region-function
	       (line-beginning-position)
	       (line-end-position)))))

(defun get-date ()
  "Insert the current date according to the variable
\"insert-date-format\"."
  (interactive "*")
  (let ((cur-time (current-time)))
    (let ((month (format-time-string "%B " cur-time))
	  (day (format-time-string "%d" cur-time))
	  (year (format-time-string "%Y" cur-time)))
      (concat month
	      day
	      (get-number-str day) 
	      ", "
	      year))))
	

(defun insert-date()
  (interactive)
  (insert (get-date)))

(defun init-assert()
  (interactive)
  (when (= (point-max) 1) ;; Insert these lines if and only if we have
			  ;; a new buffer
    (insert "#include<assert.h>\n\n\n")
    (insert "#define ASSERTS\n")
    (goto-line (- (line-number-at-pos) 3))))

(defun insert-assert()
  (interactive)
  (let ((start-point (point)))
    (insert "#ifdef ASSERTS\n")
    (insert "assert();\n")
    (insert "#endif\n")
    (indent-region start-point (point))
    (goto-line (- (line-number-at-pos) 2))
    (goto-char (search-forward "("))
    (indent-line)))

(defun my-c-mode-hook()
  (define-key c-mode-map "\C-cn" 'insert-assert)
  (init-assert))

(add-hook 'c-mode-hook 'my-c-mode-hook)

(defun has-disk-file-p(buffer)
  "Checks if a file has been saved."
  (if (bufferp buffer)
	(not (null (buffer-file-name buffer)))
    (print "Function requires a buffer")))


(defun switch-to-shell-with-current-cwd()
  "Switches to a shell buffer with the current working directory
being the working directory of the buffer"
  (interactive)
  (if (has-disk-file-p (current-buffer))
      (let ((current-directory (file-name-directory (buffer-file-name (current-buffer)))))
	(shell)
	(pop-to-buffer (get-buffer "*shell*"))
	(insert (concat "cd " current-directory ";")))
    (print "This buffer needs to be saved")))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; Global Function key settings
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;;* key binding
;; (global-unset-key [(f1)])
;; (global-set-key [(f1)] 'other-window)

;; (global-unset-key [(f2)])
;; (global-set-key [(f2)] 'enlarge-window)

;; (global-unset-key [(f3)])
;; (global-set-key [(f3)] 'enlarge-window-horizontally)

;; (global-unset-key [(f4)])
;; (global-set-key [(f4)] 'shrink-window-horizontally)

;; (global-unset-key [(f5)])
;; (global-set-key [(f5)] 'anything)

;; (global-unset-key [(f6)])
;; (global-set-key [(f6)] 'itunes-playpause)

;; (global-unset-key [(f8)])
;; (global-set-key [(f8)] 'itunes-next-track)

;; (global-unset-key [(f7)])
;; (global-set-key [(f7)] 'itunes-prev-track)

;; (global-unset-key [(control f2)])
;; (global-set-key [(control f2)] 'twit-post)


;; (global-unset-key [(control f1)])
;; (global-set-key [(control f1)] 'twit-show-recent-tweets)

;; (global-unset-key [(control f3)])
;; (global-set-key [(control f3)] 'switch-to-shell-with-current-cwd)

;; (global-unset-key [(control f5)])
;; (global-set-key [(control f5)] 'anything-for-files)

;; (global-unset-key [(control f9)])

;; (global-unset-key [(control f8)])
;; (global-set-key [(control f8)] 'ispell-word)
;; ;;;;;;;;;;;;;;;
;; ;; org-mode key  bindings
;; ;;;;;;;;;;;;;;;
;; (global-set-key (kbd "C-c a") 'org-agenda)           ;; (5)
;; (global-set-key "\C-cb" 'org-iswitchb)
;; (global-set-key (kbd "C-c r") 'remember)          
;; (global-set-key "\C-cl" 'org-store-link)


;; (global-set-key "%" 'match-paren)

;; (global-unset-key [(control x) (control o)])
;; ;;* key binding
;; (global-set-key [(control x) (control o)] 'ffap)
;; ;;* end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Abbrevs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define-abbrev global-abbrev-table "teh" "the")

(define-abbrev global-abbrev-table "actr" "ACT-R")
(define-abbrev global-abbrev-table "wordnet" "WordNet")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ruby mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(autoload 'ruby-mode "ruby-mode" "Major mode for editing ruby scripts." t)
(setq interpreter-mode-alist (append '(("ruby" . ruby-mode)) interpreter-mode-alist))
(setq auto-mode-alist (cons '("\\.rb$" . ruby-mode) auto-mode-alist))
(require 'inf-ruby)
(setq ruby-program-name "/usr/local/bin/irb --inf-ruby-mode")
;(setq ruby-program-name "/usr/bin/irb")

(setq auto-mode-alist (cons '("\\.article$" . html-mode) auto-mode-alist))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Misc Modes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SMEX customizations
;(add-to-list 'load-path (expand-file-name "~/emacs/misc"))
;(require 'smex)
;(smex-initialize)

;(global-set-key (kbd "M-x") 'smex)
;(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;(global-set-key (kbd "C-c M-x") 'smex-update-and-run)
;; This is your old M-x.
;(global-set-key (kbd "C-c  M-x") 'execute-extended-command)

(setq ido-enable-flex-matching t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Org publish
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'htmlize)

(require 'org-publish)

(setq org-publish-project-alist
      '(
	("org-notes"
	 :base-directory "~/org/"
	 :base-extension "org"
	 :publishing-directory "/Users/reuben/webpage/org-notes/" ;"/rfcornel@tty.freeshell.org:~/html/";/Users/reuben/Everything/EverythingEmacs/orgTutorial/public_html/"
	 :recursive t
	 :style     "<link rel=\"stylesheet\" type=\"text/css\" href=\"orgstyle.css\" />"	 
	 :publishing-function org-publish-org-to-html
	 :auto-index t
	 :headline-levels 4             ; Just the default for this project.
	 :auto-preamble t
	 :index-filename "sitemap.org"  ; ... call it sitemap.org ...
	 :index-title "Sitemap"         ; ... with title 'Sitemap'.
	 )
	
	("org-css"
	 :base-directory "~/org/css/"
	 :base-extension "css"
	 :publishing-directory "/Users/reuben/webpage/org-notes/" ;"/rfcornel@tty.freeshell.org:~/html/";/Users/reuben/Everything/EverythingEmacs/orgTutorial/public_html/"
;	 :publishing-directory "/Users/reuben/Everything/EverythingEmacs/orgTutorial/public_html/"
	 :recursive t
	 :publishing-function org-publish-attachment
	 )

	("org-js"
	 :base-directory "~/org/js/"
	 :base-extension "js"
	 :publishing-directory "/Users/reuben/webpage/org-notes/" ;/"/rfcornel@tty.freeshell.org:~/html/";/Users/reuben/Everything/EverythingEmacs/orgTutorial/public_html/"
;	 :publishing-directory "/Users/reuben/Everything/EverythingEmacs/orgTutorial/public_html/"
	 :recursive t
	 :publishing-function org-publish-attachment
	 )

	("org-source"
	 :base-directory "~/org/src/"
	 :base-extension "java"
	 :publishing-directory "/Users/reuben/webpage/org-notes/src" ;"/rfcornel@tty.freeshell.org:~/html/source/";/Users/reuben/Everything/EverythingEmacs/orgTutorial/public_html/"
	 :recursive t
	 :publishing-function org-publish-attachment)

	
	("org" :components ("org-notes" "org-css" "org-js" "org-source"))))
	;; ... add all the components here (see below)...
	

(load (expand-file-name "~/emacs/my-key-bindings.el"))
;(set-face-font 'default "Monaco-16")
;(set-default-font "Inconsolata-16")















