* Interview
** Technical Stuff
*** Algorithms
**** analysis of recursion
     Equation is of the format f(n) = a f(n/b) + c(n) + d
     - a number of sub problems being solved
     - b number of parts the data is split into 
     - c(n) effort required to combine the resulting parts
**** Divide and conquer
**** Sorts
Sorting orders a sequence of elements such that there is a consistent
property between all elements in the sorted sequence
***** Insertion Sort O(n^2)				  :SORT:N2:INSERTION:
      1) Start up with an array assume that the first element is
         trivially sorted.
      2) Keep a marker that indicates the start of the sorted section
      3) Loop from the second element to the end
	 a) Loop from the sorted marker to the beginning of the list
	 b) Loop while the key is lesser than the element from the
         second loop
	 c) Insert the element in the position
***** Merge Sort O(n lg n)				    :SORT:NLGN:MERGE:
      1) If the size of the list being sorted = 1 or 0 return the list
      2) else
	 1) return Merge (Mergesort(first half of list), Mergesort(second half
            list
***** Heap Sort O(n lg n)				     :SORT:NLGN:HEAP:
BUILD Max HEAP
for i <- length(A) down to 2
  exchange A[i] <-> A[ 1 ]
  heapsize(a) = heapsize(a) -1
  Max Heapify(A, 1)
***** Quick Sort O(n lg n)				    :SORT:NLGN:QUICK:
Quick Sort (list)
     If Size = 0
         return list
     else
         find mid point
	 partition the list
	 return mergesort the upper half+
                mergesort the lower half
***** Counting Sort O(n)				    :SORT:N:COUNTING:
Used when the numbers are in a specific range
  - A variation of this could be the bit sort used in the programming pearls
***** Radix Sort
For n d-digit numbers with possible k values
Thetha(d(n+k))
***** Bucket Sort
Runs in linear time if the distribution is uniform
**** Searchs
***** Binary Search O(lg n)				  :BINARY:SEARCH:LGN:
***** Depth First Search				 :DEPTH:FIRST:SEARCH:
***** Iterative Deepening			 :ITERATIVE:DEEPENING:SEARCH:
Apply DFS Iteratively to different levels
***** Breadth First Search			       :BREADTH:FIRST:SEARCH:
We always get the shortest path

Requires lot a memory
**** Selection Algorithms
***** Selection					      :ARBITRARY:SELECTION:N:
    - Works by using partition.
    - If the number list is partitioned so that the current partition is at number n
      - Then we have the element
    - Else look at the first half or the second half
***** Simultaneous Minimum and Maximum			:MAX:MIN:N:SELECTION:
   - Compare Pairs of elements from the input.
   - Compare the max of them with the global max
   - Compare the min of them with the global min
**** Tree algos
**** Algorithm to generate lexicographic permutations
**** Dynamic programming
   - Determine if there is an optimal substructure
   - Figure a recursive solution
   - Figure out a iterative solution
*** Data Structures
Thing to be remembered with all data structures is to make sure that
the memory does not overflow or underflow. This can create quite a few problems.
**** Stacks
     Precautions - Size of the data has to be checked when performing
     secure operations other wise this thing might crash.
     - Operations
       - Push
       - Pop
       - Top
**** Queues
     - Operations 
       - Queue
       - Dequeue
       - Size
       - empty
**** Heaps						       :HEAP:MAX:MIN:
Heap Property

Heap is filled up on all levels except the last level

Max Heap: For all nodes except the root, the parent is greater than the child
Min Heap: For all nodes except the root, the parent is lesser than the child
***** Procedures						 :PROCEDURES:
****** HEAPIFY							    :HEAPIFY:
In Max heap
   1) Find the largest element between the parent, left child and
      right child
   2) Exchange the places of the parent and the largest element
   3) Heapify the largest element
****** MAX HEAPIFY
For every element in i call heapify
**** Trees     
*** Primary Checks when coding
**** Over flow
**** Under flow
**** Stack overflow
**** Infinite loops
**** Try to use scaffolds
     
**** Conditions

-apple-monaco-medium-r-normal--14-140-72-72-m-140-iso10646-1
*** Networks
**** [[file:notes/UNP_RichardStevens.org][Unix Network Programming - W Richard Stevens]]
** Resume
*** Education
**** Masters
***** Thesis in CS, working with cognitive modelling
***** done with my system working on the proof of concept.
**** BE
***** Bangalore India
*** Work ex:
**** Graduate intern at verisign
***** Talk about drupal and the work done there
***** Tell them that it was new and you learned it up and did a good job
***** Also mention that I was mentioned in a mail to the organization when
the new release went out
***** Also tell them that the internship was extended will december.
***** Mention that you can provide references
**** Software engineer (2 years)
***** mention on-site co-ordinator
***** Best new employee for the 2005-06 of almost 300 people.
***** led a team of 5 people, on my last project.
***** Mention can provide references
*** Projects
**** Cogworks
***** This is the project that I'm doing for my thesis
***** Provides a collaborative environment in which cognitive modelling scientists can share models
***** Runs on a lisp based framework
***** Cognitive modelling provided by act-r
***** New representation for models that would enable a whole set of tools
and applications to be built for cognitive models
**** Testing MS Ent Lib
***** Part of course project.
***** more importantly we were testing a new beta tool from MS
***** Tool was called PEX: For automated parameterized unit testing
***** We chose the Ent Lib because of the complexity that we would find
***** We discovered bugs
****** Did not behave properly when testing code with implicit typecasting
****** Templatized Arguments not supported
***** Observations
****** Write lesser test code
****** As as a result maintain less code
****** Provides a formal spec of what happening there.
**** On screen auto mated bot
***** Given a picture of a screen this would identify controls on it for you
***** Applications
****** Systems provding user assitance and identify where controls are located
on the screen and provide help.
****** Remote Teaching aids
***** images scaled down
***** Edge detect, done using imago library
***** Images obtained using a DFS
***** Run the objects through an ID 3 decision tree to identify stuff.
**** Theorem prover
***** Given a set of starting assumptions and a conclusion this would prove if
a given conclusion is right.
***** Uses resolution
**** Session initiation protocol
***** Application layer
***** Used Lex/Yacc to parse incoming text packets
***** Used pthreads
***** Used TCP
***** Experimented with literate programming
**** TIAM Audit
***** designed a system for auditing stuff required as a part of SOX
***** Responsibilities were
****** Requirement gathering: Speak with admins of different systems and 
collaborate to get a right interface for them all while taking care of their
security needs. 
****** High level design
****** Low level design
****** Auditing test plans
**** Database query generator
***** Wrote this for fun turned out to be immensely useful.
***** Give it a tables of a database it would derive relations from the fields
***** the user could then put a query to it and it would generate SQL for the user.
**** Optional mention the game to them:
*** Personal
**** Personal Tastes
***** Love Programming
***** Love cooking
***** Travelling: Though not done much of it.
**** Goals
***** Design complete system architectures
***** See through its implementation
** Questions that you can ask the recruiter
*** What position exactly are you looking to put me in
*** Moving allowance
    :TEST:
    Test drawer
    :END:
*** What do you primarily use for technology work
** Sales force.com
*** Their biggest business is CRM:
**** This is a piece of software that helps obtain and keep customers
**** It combines processes, people and technology
**** Learn about customers and their behaviour
**** IN EFFECT: Its a business about business
*** Strong emphasis on cloud computing
** Java
*** Why use java?
**** Object orientation
**** Support for web based apps
**** Treading, socket support in the JVM
**** Portability
*** Java vs c++
**** No pointers
**** No Multiple inheritance
**** Garbage collector
**** No Destructor
**** Everything is in a class.
*** Types of java varibles
   1. Class Variable
   2. Instance Variable
   3. Array Component Variable
   4. Method Parameter Variable
   5. Constructor Parameter Variable
   6. Exception Handler Parameter Variable
   7. Local Variable
*** Java types
    byte
    short
    long
    int 
    float
    double
    char
    boolean

    String is not a primitive data type - java.lang.String.
*** Application.xml
    standard J2EE deployment descriptor
*** web.xml Descriptor for a web module
** Tell me about yourself
*** Key selling points
**** Awesome problem solver
     At work I had to deal with vague problems like the TIAM audit problem, 
**** See how things can be made better
     * provided an idea that would help the company become more efficient and save paper
     * Wrote that query tool to help people work faster
     * Coding standard checker so people could check code on the fly
*** Strong points
    Technological ability
    Always looking forward towards for new technologies.
    Responsibility: Passion for code that me or my team develops
    Intuition 
*** Weak points
     * Perfectionist atleast about code.
       
       Instance where we had bad code, sent it back, had a chat with
        my manager and learned how to deal with such situations.

     * Tend to get distracted easily.
       You have so many ideas running through your head you 
*** Personal mission statement: Make life better for people around me.
    * Data base query generator
    * My website: information
*** Why should they be interested in you
*** Pay
     Perhaps you can help me on this one. Can you tell me if there is
     a range for similar jobs in the organization?
** Things to revise [6/17]
   * Basic Data structures [0/0]
   - [X] Stacks
   - [X] Queues
    - [X] Binary Search Trees
   - [X] Linked Lists
   - [X] Heaps
   - [X] Java data structures
   * Basic OOP [0/0]
   - [ ] What is OOP
   - [ ] Inheritance
   - [ ] Polymorphism
   - [ ] Patterns [0/3]
     - [ ] Creational
     - [ ] Structural
     - [ ] Behavioral
   * Java
    - [ ] Core Java
    - [ ] JSP
    - [ ] Servlets
   * AJAX 
    - [ ] Basic AJAX concepts
** Things to do
*** Tasks [0/1]
    - [ ] Call airport and arrange for taxi
*** Packing [0/23]
    - [ ] Suit
    - [ ] Undies - 4
    - [ ] One pair of bermudas ans shorts
    - [ ] Shaving Kit [0/3]
     - [ ] Toothbrush
     - [ ] Paste
     - [ ] Razor
    - [ ] 2 T Shirts
    - [ ] 1 jeans
    - [ ] 1 Formal shirt
    - [ ] 1 Tie
    - [ ] Belt
    - [ ] Documents [0/5]
     - [ ] Directions, Midori Namoki number, Aptes number
     - [ ] Application for employment
     - [ ] Passport and the rest of the docs
     - [ ] Print out of the verisign mail
     - [ ] Itinerary
    - [ ] Wallet
    - [ ] Phone
    - [ ] Keys
    - [ ] IPod
    - [ ] Laptop
    

* Salesforce
** Notes
*** he spoke for 5 minutes with out any information
*** Come on dude...get to the point...
*** ok he made the people who had come from outside feel good.
*** Thanks tonnes of thanks
*** Come on...get to the point.
*** Starts up with an intro to cloud computing
**** lot of emphasis of the customers - Size
***** IMP of the customer does not matter because of the cloud
****** Leads to democratization
**** Starts off by showing the benefits of salesforce.com
**** Talks about being socially responsible
***** Very positive
*** Mayor of Gavin Newsom
**** A whole lot of initiaitives to give things back 1-1-1
*** Provide transparency for customers.
**** Five minute upgrade
**** 
*** Applications
**** Sales cloud 2
***** Customer Feedback is very valueable
**** Service Cloud
**** Custom cloud

**** Chatter
***** Overview of social computing
****** starting with lotus notes
****** coming today using facebook and twitter.
***** It perhaps an attempt by salesforce to leverage to integrate collaboration
***** Looking into the future
***** Chatter
****** Enterprise apps can communicate
    
** how the company is doing.
** company strategy.
** introduction to something new.
* Amazon interview prep
** Java
*** All Stuff
** Algorithms
*** Sorting
*** Searching
*** Trees
*** Data structures
*** Graph Algorithms
*** Dynamic Programming

