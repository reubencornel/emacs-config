#+SETUPFILE: ~/emacs/org-templates/level-0.org
#+TITLE: The little book of semaphores - Allen B Downey

* The little book of semaphores - Allen B Downey
  This is a free book that discusses synchronization topics. I don't
  remember where I originally downloaded it from.
* Introduction
** Synchronization
   - In terms of computer science refers to the order in which things
     are carried out.
** Execution Models
   - Sequential - one statement is executed immediately after
     another. In such as case synchronization is trivial.
   - Parallel: cases could be
     - Multiple processors
     - Single processes multiple threads.
   - In a real world system the scheduler decides when a particular
     thread must run.
** Serialization with messages
   - One of the most basic ways to perform syncronization is to pass
     messages around
** Non determinism
   - Concurrent programs are non deterministic as a result they have
     their own set of problems to deal with the most obvious ones
     being that one they are hard and difficult to debug.
** Models of interactions
   - Concurrent writes
   - Concurrent updates
     In both of the above cases care has to be taken that the updates
     and the writes are atomic
   - Mutual exclusion with messages
* Semaphores
  - Invented by Dijkstra
  - Main operations that you can perform
    - To get into critical section a thread has to decrement the value
      of the semaphore
      - If the value of the semaphore is negative, then the thread
        waits till the value is made positive by another thread.
      - When a thread increments a semaphore it sends a notification
        to all other waiting threads.
    - They are given names =P= and =V=
* Basic Synchronization patterns
  - This chapter talks about 
** Signalling
