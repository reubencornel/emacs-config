;; (asdf:oos 'asdf:load-op 'imago)
;; (asdf:oos 'asdf:load-op 'ch-image)

;; (defparameter *original-image* (imago:read-png "/Users/reuben/img.png"))
;; (defparameter *gray-image* (imago:convert-to-grayscale *original-image*))
;; (defparameter *edge* (imago:edge-detect *gray-image*))
;; (imago:write-png *edge* "/Users/reuben/test.png")
;; (defparameter threshold-intensity 67)


;; (defmacro while-list-not-empty(list &body body)
;;   `(loop until (null ,list)
;; 	do (progn
;; 	     ,@body)))

;; (defun make-point (x y)
;;   (list x y))

;; (defparameter *north* (list (list #'+ 0) (list #'- 1)))
;; (defparameter *south* (list (list #'+ 0) (list #'+ 1)))
;; (defparameter *east* (list (list #'+ 1) (list #'+ 0)))
;; (defparameter *west* (list (list #'- 1) (list #'+ 0)))
;; (defparameter *north-east* (list (list #'+ 1) (list #'- 1)))
;; (defparameter *north-west* (list (list #'- 1) (list #'- 1)))
;; (defparameter *south-east* (list (list #'+ 1) (list #'+ 1)))
;; (defparameter *south-west* (list (list #'- 1) (list #'+ 1)))

;; (defun get-x-component(direction)
;;   (first direction))
;; (defun get-y-component(direction)
;;   (second direction))

;; (defun get-function(component)
;;   (first component))
;; (defun get-intensity(component)
;;   (second component))


;; (defun can-move-p (direction x y image stack boundary)
;;   (let* ((intended-x (funcall (get-function (get-x-component direction)) x (get-intensity (get-x-component direction))))
;; 	 (intended-y (funcall (get-function (get-y-component direction)) y (get-intensity (get-y-component direction)))))
;;     (if (and (not (< intended-x 0))
;; 	     (not (< intended-y 0))
;; 	     (not (member (list intended-x intended-y) stack :test #'equal))
;; 	     (not (member (list intended-x intended-y) boundary :test #'equal)))
;; 	(let ((intensity (imago:gray-intensity (imago:image-pixel image intended-x intended-y))))
;; 	  (if (> intensity threshold-intensity)
;; 	      t
;; 	      nil)))))

   
;; (defun get-pixels-in-direction (direction x y)
;;   (let* ((intended-x (funcall (get-function (get-x-component direction)) x (get-intensity (get-x-component direction))))
;; 	 (intended-y (funcall (get-function (get-y-component direction)) y (get-intensity (get-y-component direction)))))
;;     (list intended-x intended-y)))

;; ;(imago:color-rgb (imago:image-pixel *edge* 0 0))
;; ;(imago:color-intensity (imago:image-pixel *edge* 298 124))
;; ;(imago:gray-intensity (imago:image-pixel *edge* 298 124 ))

;; ;; (can-move-p *north* 29 3 *edge* '((29 3) (29 2)) '())
;; ;; (defparameter bound (dfs *edge* 56 5))
;; ;; (defparameter bound (dfs *edge* 296 144))

;; ;; (print bound)


;; (defun dfs(image x y)
;;   (let ((stack (list (make-point x y)))
;; 	(boundary (list (make-point x y))))
;;     (while-list-not-empty stack
;;       (let* ((current-point (first stack))
;; 	     (current-x (first current-point))
;; 	     (current-y (second current-point)))
;; 	(cond ((can-move-p *north* current-x current-y image stack boundary)
;; 	       (push (get-pixels-in-direction *north* current-x current-y) stack)
;; 	       (push (get-pixels-in-direction *north* current-x current-y) boundary))	      
;; 	      ((can-move-p *south* current-x current-y image stack boundary)
;; 	       (push (get-pixels-in-direction *south* current-x current-y) stack)
;; 	       (push (get-pixels-in-direction *south* current-x current-y) boundary))
;; 	      ((can-move-p *east* current-x current-y image stack boundary)
;; 	       (push (get-pixels-in-direction *east* current-x current-y) stack)
;; 	       (push (get-pixels-in-direction *east* current-x current-y) boundary))
;; 	      ((can-move-p *west* current-x current-y image stack boundary) 
;; 	       (push (get-pixels-in-direction *west* current-x current-y) stack)
;; 	       (push (get-pixels-in-direction *west* current-x current-y) boundary))
;; 	      ((can-move-p *north-east* current-x current-y image stack boundary)
;; 	       (push (get-pixels-in-direction *north-east* current-x current-y) stack)
;; 	       (push (get-pixels-in-direction *north-east* current-x current-y) boundary))
;; 	      ((can-move-p *north-west* current-x current-y image stack boundary)
;; 	       (push (get-pixels-in-direction *north-west* current-x current-y) stack)
;; 	       (push (get-pixels-in-direction *north-west* current-x current-y) boundary))
;; 	      ((can-move-p *south-east* current-x current-y image stack boundary)
;; 	       (push (get-pixels-in-direction *south-east* current-x current-y) stack)
;; 	       (push (get-pixels-in-direction *south-east* current-x current-y) boundary))
;; 	      ((can-move-p *south-west* current-x current-y image stack boundary)
;; 	       (push (get-pixels-in-direction *south-west* current-x current-y) stack)
;; 	       (push (get-pixels-in-direction *south-west* current-x current-y) boundary))
;; 	      (t 
;; 	       (pop stack)))))
;;     boundary))

;; (defun scan(image)
;;   (with-open-file (op "/Users/reuben/op"
;; 		      :direction :output
;; 		      :if-exists :supersede)    
;;     (imago:do-image-pixels (image color x y)
;;       (let ((intensity (imago:gray-intensity (imago:image-pixel image x y))))
;; 	(if (> intensity threshold-intensity)
;; 	   (print (dfs image x y)))))))
;; ;;(scan *edge*)


(defparameter *line* "root|11260|0.1|0.0|0:09.60|/usr/sbin/nmbd")

