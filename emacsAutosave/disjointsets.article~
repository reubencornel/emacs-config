* Data Structure for disjoint sets

** Introduction

Sometime applications require us to maintain a collection of elements
as collection of disjoint sets. The most important operations that
would be needed of such a data structure would be querying if an
element belongs to particular set and merging two sets. The thing that
gets me excited about this data structure is that almost all
operations run in linear time(woo hoo!!). 

The textbook cites the example of connected components as a use of
disjoint sets. The connected components problem requires us to
identify if a two given nodes in a graph are connected. This can be
extended to the practical world, for example consider the case of
finding if we have a path between two cities or perhaps in a social
network we can use this to find out really quickly if one individual
can know to someone else very quickly.

The disjoint set data structure is a collection S where S =
{S<sub>1</sub>, S<sub>2</sub>..., S<sub>k</sub>} of disjoint dynamic
sets. Each set is represented by an element of the set, that might
selected based on some pre-specified rule or arbitrarily. This element
is known called the <i>representative</i>. 

** Operations

The operations that this data structure would have to implement are 

<ul>
<li> Make-Set(<i>x</i>) Creates a disjoint set whose only member and
representative is <i>x</i>. This runs in O(1).
<li> Union(<i>x, y</i>) Performs a union of two disjoint sets
S<sub><i>x</i></sub> and S<sub><i>y</i></sub>. 
<li> Find-Set(<i>x</i>) Returns a pointer to a set to the
representative of the set containing <i>x</i>. This runs in O(1).
</ul>

This data structure can be represented using linked lists. The figure
below shows how this is done. Make-Set and Find-Set are pretty
efficient in almost all cases. The only operation that we really have
to look at is Union.

*** A simple implementation of Union

The most naive implementation of Union would consist of appending one
list to the end of another and updating all the head pointers. However
we can contrive a set of operations that make the performance for a
n-1 Unions run at about &Theta(n<sup>2</sup>) operations.

*** Weighted union heuristic

The idea here is to append a shorter list to a longer list. So as a
result this would require us to maintain information related to the
length of the set in the list. It can be shown that the amortized
performance of this data structure over a sequence of Make-Set,
Find-Set and Unions would be O(m + n lg n).

** Disjoint set forests

We represent faster implementations of disjoint sets as rooted
trees where each tree represents one set. In a disjoint set forest
each member points only to its parent. The root of each tree contains
the representative and is its own parent. 

The operations on the trees are carried out as follows. 

<ul>
<li> Make-Set(<i>x</i>): Creates a tree with x as the only element and
the representative. This runs in O(1).
<li> Union(<i>x, y</i>) Performs a union of two disjoint sets
S<sub><i>x</i></sub> and S<sub><i>y</i></sub> by making the
representative of one tree point to the root of another.
<li> Find-Set(<i>x</i>) Returns a pointer to a set to the
representative of the set containing <i>x</i>. This is done by
following the parent pointers of the nodes till we reach the root of
the tree.
</ul>

This good this with this representation is that we  can get really
fast times on the union operations. The bad thing is that if the tree
turns out to be arranged linearly we get screwed quite badly on the
time required to perform the query operation. Fortunately for us we
have two heuristics that get the running time down to O(m) where m is
the number of operations that we perform on the tree.

<ul>
<li> <i>Union by rank</i>: This heuristic is similar to the weighted
union heuristic we know and love. It entails making the root of the
tree with lower height point to the tree who has a higher height. This
height information being stored in the tree is called rank.
<li> <i>Path Compression</i>: The idea here pretty simple, as you go
about looking for the parent of a particular node, make all the
elements along the path point to the root of the tree. This can be
written using a very nice recursive procedure. 
</ul>

The cool thing about this is that with these two heuristics the Worst
case running time is O(<i>m &alpha(n)</i>), where <i>&alpha(n)</i>
grows really, really slowly.

